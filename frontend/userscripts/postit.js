let recognition; // R√∂stigenk√§nning
let isRecording = false; // Status f√∂r inspelning
let collectedText = ""; // Samlar all text
let lastTranscript = ""; // H√•ller koll p√• senaste transkriberingen
let textArea = document.getElementById("postItText");
const postItContainer = document.getElementById("postItContainer");
let stopTimeout; 
let transcriptSet = new Set();  // üü¢ Lagra unika transkriberingar

/// ----------------------------------------------------------------
// üìå Sidladdning ‚Äì Startar n√§r DOM √§r redo
// ----------------------------------------------------------------
document.addEventListener("DOMContentLoaded", async function () {
    console.log("üöÄ Initierar Post-It-sidan");

    const ok = await initUserSession();
    if (!ok) return;

    // ‚úÖ Plocka r√§tt namn manuellt fr√•n sessionStorage
    const userData = JSON.parse(sessionStorage.getItem("userData") || "{}");
    const name = userData.c_name || "V√§n";
    document.querySelector("#dashboardUser").textContent = `V√§lkommen, ${name}`;

    // ‚úÖ Resterande funktioner
    loadPostIts();
    initializeSpeechRecognition();

    const postItText = document.getElementById("postItText");
    const modal = new bootstrap.Modal(document.getElementById("postItModal"));

    document.querySelector("#openPostItModal").addEventListener("click", () => {
        postItText.value = "";
        modal.show();
    });

    document.querySelector("#savePostIt").addEventListener("click", () => {
        const text = postItText.value.trim();
        if (text) {
            savePostItToDB(text);
            modal.hide();
        }
    });

    document.querySelector("#startRecording").addEventListener("click", startSpeechRecognition);
    document.querySelector("#stopRecording").addEventListener("click", stopSpeechRecognition);

    console.log("‚úÖ Post-It √§r redo");
});


// -----------------------------------------------------------
// üé§ R√∂stinspelning ‚Äì motor (Fixar kontinuerlig rendering och korrekt concatenation)
// -----------------------------------------------------------

function initializeSpeechRecognition() {
    console.log("üé§ R√∂stigenk√§nning initieras...");

    recognition = new webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;  // üü¢ Ger l√∂pande uppdatering
    recognition.lang = "sv-SE";

    recognition.onresult = function (event) {
        let transcript = event.results[event.results.length - 1][0].transcript.trim();
    
        // üîπ Dela upp texten i ord f√∂r mer exakt j√§mf√∂relse
        let words = transcript.split(" ");
    
        // üü¢ Filtrera bort dubbletter ‚Äì endast nya ord l√§ggs till
        let newWords = words.filter(word => !transcriptSet.has(word));
    
        if (newWords.length === 0) {
            console.warn("‚ö†Ô∏è Ingen ny text, ignorerar.");
            return;
        }
    
        // üîπ L√§gg till nya ord i Set och uppdatera textArea
        newWords.forEach(word => transcriptSet.add(word));
        textArea.value += " " + newWords.join(" ");
    };

    recognition.onspeechstart = function () {
        console.log("üé§ R√∂stuppt√§ckt ‚Äì inspelning p√•g√•r...");
        clearTimeout(stopTimeout); // üü¢ Nollst√§ll timeout vid ny r√∂st
    };

    recognition.onspeechend = function () {
        console.log("üõë Ingen r√∂st uppt√§ckt, startar timeout...");
        
        if (stopTimeout) clearTimeout(stopTimeout); // üü¢ F√∂rhindrar flera timeouts

        stopTimeout = setTimeout(() => {
            recognition.stop();
            isRecording = false;
            console.log("üõë Ingen r√∂st uppt√§ckt p√• 5 sekunder, inspelning stoppad.");
        }, 5000);
    };

    // üü¢ Manuell styrning via knappar
    window.startSpeechRecognition = function () {
        if (!isRecording) {
            recognition.start();
            isRecording = true;
            console.log("üé§ Inspelning startad...");
        } else {
            console.warn("‚ö†Ô∏è Inspelning p√•g√•r redan, startar inte om.");
        }
    };

    window.stopSpeechRecognition = function () {
        if (isRecording) {
            recognition.stop();
            isRecording = false;
            clearTimeout(stopTimeout);
            console.log("üõë Inspelning stoppad.");
        }
    };
}

//---------------------------------------------------------------
// Lampa som s√§ger att du √§r in the air
//---------------------------------------------------------------
const statusIndicator = document.getElementById("aiStatus");

function updateStatusIndicator(active) {
    if (!statusIndicator) return;
    statusIndicator.style.backgroundColor = active ? "#198754" : "#dc3545"; // Gr√∂n/R√∂d
    statusIndicator.title = active ? "AI √§r aktiv üé§" : "AI √§r vilande ‚è∏Ô∏è";
}

// ----------------------------------------------------------------
// üíæ Spara Post-It till databasen
// ----------------------------------------------------------------
function savePostItToDB(text) {
    console.log("üîπ savePostItToDB anropad");

    // üîπ H√§mta anv√§ndardata och contract_id fr√•n sessionStorage
    const userData = JSON.parse(sessionStorage.getItem("userData"));
    const contractId = sessionStorage.getItem("contract_id");

    // üîç Debug-loggar f√∂r att identifiera problemet
    console.log("üîç Debug: sessionStorage userData:", userData);
    console.log("üîç Debug: sessionStorage contract_id:", contractId);

    if (!userData || !userData.id || !contractId) {
        console.error("‚ùå Anv√§ndare saknas eller contract_id √§r null!");
        alert("Ingen anv√§ndare inloggad eller saknar kontrakt. Du loggas ut.");
        sessionStorage.clear();
        window.location.href = "userDashboard.html"; // Skickar anv√§ndaren till dashboarden
        return;
    }

    // üîπ Bygg JSON-data f√∂r POST-anropet
    const postData = {
        user_id: userData.id,
        contract_id: contractId,
        text: text.trim()
    };

    console.log("üìå Skickar Post-It till backend:", postData);

    fetch(`${BASE_URL}/postit`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(postData)
    })
    .then(response => {
        if (response.status === 401 || response.status === 403) {
            console.error("‚õî Obeh√∂rig! Loggar ut anv√§ndaren...");
            sessionStorage.clear();
            window.location.href = "userDashboard.html"; 
            return;
        }
        if (!response.ok) {
            throw new Error(`‚ùå Misslyckades med att spara Post-It! Status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (!data) return;
        console.log("‚úÖ Post-It sparad i backend:", data);
        loadPostIts(); // Ladda om listan
    })
    .catch(error => {
        console.error("‚ùå Fel vid sparning av Post-It:", error);
        alert("Kunde inte spara Post-It. Kontrollera anslutningen och f√∂rs√∂k igen.");
    });
}

// --------------------------------------------------------------------------
// ‚úÖ Ladda Post-Its
// -------------------------------------------------------------------------
function loadPostIts() {
    fetch(`${BASE_URL}/postit`)
        .then(response => response.json())
        .then(data => {
            postItContainer.innerHTML = ""; // üü¢ Rensa container innan ny data l√§ggs in
            
            data.forEach(post => {
                const card = document.createElement("div");
                card.classList.add("col-md-4", "mb-3", "post-it");

                card.innerHTML = `
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Uppr√§ttad av</h6>
                            <h6 class="card-subtitle mb-2 text-muted">${post.c_name}</h6>
                            <p class="card-text preview">${post.text.substring(0, 50)}...</p>
                            <p class="card-text full-text d-none">${post.text}</p>
                            <button class="btn btn-sm btn-outline-secondary expand-btn">Mer...</button>
                            <button class="btn btn-sm btn-danger mx-1 delete-btn">üóëÔ∏è</button>
                        </div>
                    </div>
                `;


                const expandBtn = card.querySelector(".expand-btn");
                const deleteBtn = card.querySelector(".delete-btn");

                expandBtn.addEventListener("click", function () {
                    togglePostItExpand(card, expandBtn);
                });

                deleteBtn.addEventListener("click", function (event) {
                    event.stopPropagation();
                    deletePostIt(post.id);
                });

                postItContainer.appendChild(card);                
            });            
        })
        .catch(error => console.error("‚ùå Fel vid h√§mtning av Post-Its:", error));
}

// ‚úÖ Toggle f√∂r Post-It (expandera/minimera)
// Enkel Toggle f√∂r Post-It (expandera/minimera)
function togglePostItExpand(card, button) {
    if (!card || !button) return;

    let postId = card.dataset.postId; // H√§mta postens unika ID
    let previewText = card.querySelector(".preview");
    let fullText = card.querySelector(".full-text");

    if (!previewText || !fullText) return;

    // Om kortet √§r i preview-l√§ge ‚Üí Expandera
    if (card.dataset.expanded === "false") {
        previewText.innerHTML = fullText.innerHTML; // S√§tt fulltext
        button.innerText = "Mindre";
        card.dataset.expanded = "true"; // Uppdatera status
    } else {
        // Om kortet √§r expanderat ‚Üí G√• tillbaka till preview
        previewText.innerHTML = fullText.innerHTML.substring(0, 50) + "..."; // S√§tt preview-text
        button.innerText = "Mer";
        card.dataset.expanded = "false"; // Uppdatera status
    }
}

// ‚úÖ Radera Post-It (med en confirm och omladdning)
function deletePostIt(postitId) {
    if (!confirm("‚ö†Ô∏è √Ñr du s√§ker p√• att du vill radera denna Post-It?")) {
        return;
    }

    fetch(`${BASE_URL}/postit/${postitId}`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("‚ùå Kunde inte radera Post-It!");
        }
        return response.json();
    })
    .then(data => {
        console.log("üóëÔ∏è Post-It raderad:", data);
        loadPostIts(); // Ladda om listan efter radering
    })
    .catch(error => console.error("‚ùå Fel vid radering av Post-It:", error));
}





